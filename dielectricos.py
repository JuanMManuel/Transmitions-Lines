# -*- coding: utf-8 -*-
"""dielectricos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13Re5yUYReQR46FsKjzqYeQZCm1mMzqLG
"""

import numpy as np 
import matplotlib.pyplot as plt
import random
# Variables que ingresa el usuario.
n1 = 1 #@param {type: "number"}
n2 = 1.5168 #@param {type: "number"}
angInc = 20 #@param {type: "number"}
angInc = np.radians(angInc) # de grados a radianes.funciones de Numpy trabajan con radianes
# para n1 < n2
angBrewster = np.degrees(np.arctan(n2/n1)) # angulo donde la onda sufre su mayor polarización
# para n1 > n2
angCritico = np.degrees(np.arcsin(n2/n1)) # ángulo donde la onda difractada desaparece
angDifrac = np.arcsin(((n1*np.sin(angInc))/n2))

# creación de el pedazo de circunferencia que representa el ángulo
def ValuesAngle(angle, onda):
    radio =  random.uniform(0.15, 0.25) #generamos un radio aleatorio para la medida del ángulo
    xi =np.sin(angle) * radio # ubicamos el punto a partir del cual gráficar el ángulo
    if(onda == 'incidente'): # caso de la onda incidente
        x = np.linspace(-xi,0,500) #va desde la intersección del rayo incidente hasta eje y
        y = np.sqrt(radio*radio-x*x) # ecuación de la circunferencia para hallar y
    elif(onda == 'reflejada'): # caso onda reflejada
        x = np.linspace(0,xi,1000) # desde el eje y hasta intersección con rayo reflejado
        y = np.sqrt(radio*radio-x*x)
    else: # onda refractada 
        x = np.linspace(0,xi,1000) # desde  
        y = -np.sqrt(radio*radio-x*x)
    radio = np.ones(len(x)) * radio
    return (x,y)

# gráficación de los elementos
fig, ax = plt.subplots()
m = 1/np.tan(angInc)#calculo de la pendiente para la onda incidente
ax.plot([-1,0], [m,0], label = 'onda incidente')
ax.plot([0,1], [0,m], label = 'onda reflejada')
if (n2 > n1):
    yn =np.arctan(angDifrac)
    ax.plot([0,1], [0,-1/np.tan(angDifrac)], label = 'onda refractada', linestyle = '--')
    x, y = ValuesAngle(angDifrac, 'difractada');ax.plot(x,y)
else:
    if(angCritico>np.degrees(angDifrac)):
        yn =np.arctan(angDifrac)
        ax.plot([0,1], [0,-1/np.tan(angDifrac)], label = 'onda refractada', linestyle = '--')
        x, y = ValuesAngle(angDifrac, 'difractada');ax.plot(x,y)

ax.plot([0,0], [2,-2]) #normal de la superficie
x, y = ValuesAngle(angInc, 'reflejada');ax.plot(x,y)
ax.text(-.1,0.05, "{:.0f}°".format(np.degrees(angInc)),fontsize=9,rotation=45)
x, y = ValuesAngle(angInc, 'incidente');ax.plot(x,y)
ax.text(.01,0.03, "{:.0f}°".format(np.degrees(angInc)),fontsize=9,rotation=-45)
ax.set_xlim(-1.2, 1.2)
ax.set_ylim(-1.2, 1.2)
ax.set_xticks([])
ax.set_yticks([])
medio2 = plt.Rectangle((-2, -2), 4,2, color='#d187f5',alpha=0.3) 
ax.add_artist(medio2)
ax.legend()
ax.set_title("Reflexión y refracción de ondas")
fig.show()

print(np.degrees(angDifrac))

import numpy as np 
import matplotlib.pyplot as plt
import random
n1 = 1 #@param {type: "number"}
n2onda1 = 1.5187#@param {type: "number"}
n2onda2 = 2#@param {type: "number"}
angInc = 50#@param {type: "number"}
angInc = np.radians(angInc)

# datos de las ondas
n2 =[n2onda1, n2onda2]
angBrewster = [np.degrees(np.arctan(n2onda1/n1)), np.degrees(np.arctan(n2onda2/n1))] 
angCritico = [np.degrees(np.arcsin(n2onda1/n1)),np.degrees(np.arcsin(n2onda2/n1))]
angDifrac = [np.arcsin(((n1*np.sin(angInc))/n2onda1)),np.arcsin(((n1*np.sin(angInc))/n2onda2))]


fig, ax = plt.subplots() 
m = 1/np.tan(angInc)
#graficación de onda incidente.
xsin = np.linspace(-2,0,1000)
ysin = 0.05*np.sin(2*np.pi*10*xsin)
xsinrot = xsin*np.cos(np.pi/2-angInc)+ysin*np.sin(np.pi/2-angInc)
ysinrot = -xsin*np.sin(np.pi/2-angInc)+ysin*np.cos(np.pi/2-angInc)
ax.plot(xsinrot, ysinrot, label = 'onda incidente')
for i in range(2):
    if (n2[i] > n1):
        yn =np.arctan(angDifrac[i])
        ax.plot([0,1], [0,-1/np.tan(angDifrac[i])], label = 'onda   refractada', linestyle = '--')
        x, y = ValuesAngle(angDifrac[i], 'difractada');ax.plot(x,y)
    else:
        if(angCritico[i]>np.degrees(angDifrac[i])):
            yn =np.arctan(angDifrac[i])
            ax.plot([0,1], [0,-1/np.tan(angDifrac[i])], label = 'onda   refractada', linestyle = '--')
            x, y = ValuesAngle(angDifrac[i], 'difractada');ax.plot(x,y)

grados=np.degrees(angDifrac[0])
ax.plot([0,0], [2,-2])
ax.set_xlim(-1.2, 1.2)
ax.set_ylim(-1.2, 1.2)
ax.set_xticks([])
ax.set_yticks([])
medio2 = plt.Rectangle((-2, -2), 4,2, color='#d187f5',alpha=0.3)
ax.add_artist(medio2)
ax.legend()
ax.set_title("Reflexión y refracción de ondas")
fig.show()

print("angulo onda 1", np.degrees(angDifrac[0]))
print("angulo onda 2", np.degrees(angDifrac[1]))

print(np.degrees(angDifrac))

import matplotlib.pyplot as plt

#trabajamos en terminos de milimetros
fig, ax = plt.subplots(1,2)

#para N-BK7
n1 = 1
nonda1 = 1 #ventana 1 (color verde) 
nonda2 = 1.5147 #ventana 3(color rojo)
n2 = [nonda1,nonda2]
atenuacion1 = 0.00165
atenuacion2 = 0.0024
angInc = 20
angInc = np.radians(angInc)

fibra=plt.Rectangle((-1.3,-5),2.6,5, color='#06FFE8',alpha=0.3)
ax[0].add_artist(fibra)
ax[0].set_xlim(-5,5)
ax[0].set_ylim(-7,2)

m = 1/np.tan(angInc)
ax[0].plot([-1,0], [m,0], label = 'onda incidente')
angDifrac = [np.arcsin(((n1*np.sin(angInc))/n2onda1)),np.arcsin(((n1*np.sin(angInc))/n2onda2))]
for i in range(2):
    yn =np.arctan(angDifrac[i])
    ax[0].plot([0,1], [0,-1/np.tan(angDifrac[i])], label = 'onda   refractada', linestyle = '--')

# para N-SF5
n1 = 1
nonda1 = 1 #ventana 1 (color verde) 
nonda2 = 1.6910 #ventana 3(color rojo)
n2 = [nonda1,nonda2]
atenuacion1 = 0.00165
atenuacion2 = 0.0024
angInc = 20
angInc = np.radians(angInc)

fibra=plt.Rectangle((-1,-5),2,5, color='#06FFE8',alpha=0.3)
ax[1].add_artist(fibra)
ax[1].set_xlim(-5,5)
ax[1].set_ylim(-7,2)

m = 1/np.tan(angInc)
ax[1].plot([-1,0], [m,0], label = 'onda incidente')
angDifrac = [np.arcsin(((n1*np.sin(angInc))/n2onda1)),np.arcsin(((n1*np.sin(angInc))/n2onda2))]
for i in range(2):
    yn =np.arctan(angDifrac[i])
    ax[1].plot([0,1], [0,-1/np.tan(angDifrac[i])], label = 'onda   refractada', linestyle = '--')
plt.show()
plt.show()

